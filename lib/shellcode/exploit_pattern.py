import sys
import itertools

Options =	{
		"pattern"   : [0, "pattern type, 0 = basic, 1 = extended"]
		}

def to_hex(num):
	"""
	Convert a number to hex format
	"""
	if num < 0:
		return "-0x%x" % (-num)
	else:
		return "0x%x" % num

def hex2str(hexnum):
	"""
	Convert a number in hex format to string
	"""
	if not isinstance(hexnum, str):
		hexnum = to_hex(hexnum)
	s = hexnum[2:]
	if len(s) % 2 != 0:
		s = "0" + s
	result = s.decode('hex')[::-1]
	return result

def to_int(val):
	"""
	Convert a string to int number
	"""
	try:
		return int(str(val), 0)
	except:
		return None

def cyclic_pattern(size=None, type=None):
	"""
	Generate a Metasploit style cyclic pattern

	Args:
		- size: size of generated pattern (Int)
		- type: charset type
			0: basic type
			1: extended type (default)

	Returns:
		- pattern text (String)
	"""
	char1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	char2 = "abcdefghijklmnopqrstuvwxyz"
	char3 = "0123456789"
	char2_ext = "%$-"
	char3_ext = "sn();"

	if size is None:
		size = 20000

	if not type:
		type =(Options["pattern"][0])

	if type == 1: # extended type
		char2 = char2_ext + char2
		char3 = char3_ext + char3

	pattern = ""
	allchars = itertools.product(char1, char2, char3)
	count = 0
	for p in allchars:
		pattern += "".join(p)
		if count > size:
			break
		count += 3

	return pattern[:size]


def cyclic_pattern_offset(value, size=None, type=None):
	"""
	Search a value if it is a part of Metasploit style cyclic pattern

	Args:
		- value: value to search for (String/Int)
		- size: size of generated pattern (Int)
		- type: charset type
			0: basic type
			1: extended type (default)

	Returns:
		- offset in pattern if found
	"""
	pattern = cyclic_pattern(size, type)
	if to_int(value) is None:
		search = value
	else:
		search = hex2str(to_int(value))
		
	pos = pattern.find(search)
	return pos if pos != -1 else None


if __name__ == '__main__':
	if len(sys.argv) < 3:
		print ("[usage]\npython   %s  -m [create | offset]   size   [type  0:basic 1:extent]"%sys.argv[0])
		exit(0)

	method = (sys.argv[2])
	size = int(sys.argv[3])
	type = 0
	if  len(sys.argv) > 4:
		type = int(sys.argv[4])
	if method == 'create':
		print cyclic_pattern(size,type)
	elif method == 'offset':
		overwirte_value = raw_input("overwirte_value:")
		overwirte_value = overwirte_value[:4]
		print cyclic_pattern_offset(overwirte_value,size,type)
	else:
		print ("wrong method!")